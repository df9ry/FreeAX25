/*
    Project FreeAX25
    Copyright (C) 2015  tania@df9ry.de

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef UNIQUEPOINTERDICT_H_
#define UNIQUEPOINTERDICT_H_

#include "PointerDict"

namespace FreeAX25 {

/**
 * Typename for base class.
 */
template <typename T>
using UniquePointerDictBase = PointerDictBase<T, ::std::unique_ptr<T>>;

/**
 * Typename for pairs.
 */
template <typename T>
using UniquePointerDictPair = PointerDictPair<T, ::std::unique_ptr<T>>;

/**
 * Typename for iterator.
 */
template <typename T>
using UniquePointerDictIterator = PointerDictIterator<T, ::std::unique_ptr<T>>;

/**
 * Typename for const
 */
template <typename T>
using UniquePointerDictConstIterator = PointerDictConstIterator<T, ::std::unique_ptr<T>>;

/**
 * Template for hashed maps with string keys and unique_ptr support.
 */
template <typename T>
using UniquePointerDict = class PointerDict<T, ::std::unique_ptr<T>>;

} /* namespace FreeAX25 */

#endif /* UNIQUEPOINTERDICT_H_ */
